
INTRO:
        I am Rinson Peter,I am from Fortkochin,
        I am a BCA graduate passed out 2014.
        
        After that I worked at conduent 2 years
        as A Payroll Associate(US Pension Payroll)

        Then I moved to Zellis 
        worked on UK payroll2 years.

        I realized that I was nt getting Skills
        or learning anything, so I wanted to make a 
        switch to IT field.

        learnt Python basics online 

        did a 4 month course on Python Django
        also did 2 month internship there itself.
        
        after that I did an 1 month intersip with 
        Mindcoopers Kochi. JUNE 2021
   
MIDDLEWARES:
	
      What is the purpose of Middlewares in Django?
    Middleware is used to perform a function in the application. The functions can be a security, session, csrf protection, authentication etc. Django provides various built-in middleware and also allows us to write our own 

STATIC: (CLASS VARIABLE(static) AND INSTANCE VARIABLE)
    
    When we declare a variable inside a class but outside any method, it is called as class or static variable in python. Class or static variable can be referred through a class but not directly through an instance.

    classname.staticvaribale
    or
    obj.static variable

    Static Method:

    class Person:   
        @staticmethod  
        def Age (age):  
            if (age <= 18): # check whether the Person is eligible to vote or not.  
                print ("The person is not eligible to vote.")  
            else:  
                print ("The person is eligible to vote.")  
  
    Person.Age(17)  

    Python has a static method that belongs to the class. It is just like a static variable that bounds to the class rather than the class's object. 

    A static method can be called without creating an object for the class. It means we can directly call the static method with the reference of the class name.
    
    Furthermore, a static method is constrained with a class; hence it cannot change the state of an object.

LAMBDA:
    In Python, a lambda function is a single-line function declared with no name, which can have any number of arguments, but it can only have one expression. Such a function is capable of behaving similarly to a regular function declared using the Python's def keyword

GENERATOR:
    A Generator is an elegant way to create custom iterators in Python that makes it really easy to work with iterators.

    Python provides a generator to create your own iterator function. A generator is a special type of function which does not return a single value, instead, it returns an iterator object with a sequence of values. In a generator function, a yield statement is used rather than a return statement.

    Generators are a special class of functions that simplify the task of writing iterators. A generator is a function that produces a sequence of results instead of a single value, i.e you generate ​a series of values.

    Generator-Function : A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function.
PEP: 
    PEP stands for Python Enhancement Proposal. A PEP is a design document providing information to the Python community, or describing a new feature for Python or its processes or environment. The PEP should provide a concise technical specification of the feature and a rationale for the feature.13-Jun-2000
    
ITERABLES:
	    anytining that can be looped over in python 
		eg : list, tuple,dict,sets
	    or:
		interator in python is simpley an object that can can return data one ata time while ierating over it

        REQ METHODS:
            iter()
            next()
    
        eg:  nums=[1,2,3]
        value=nums.__iter__() #iter(nums)

        print(value.__next__()) #1   next(value)
        print(value.__next__()) #2
        print(value.__next__()) #3


		check dir(obj)  # obj can be a list tuple or dict
            we can see __iter__ method available 

	

DECORATOR:
	decorator is a function that takes in another function as a parameter add some functionality to it and then returns the original function
	A decorator acts as a wrapper to other functions.
	 
ORM:
    Django ORM provides an elegant and powerful way to interact with the database in an Object-Oriented fashion. ORM is a library that automatically transfers data stored in databases into objects commonly used in application code.

    An object-relational mapper (ORM) is a code library that automates the transfer of data stored in relational database tables into objects that are more commonly used in application code.

    One of the most powerful features of Django is its Object-Relational Mapper (ORM), which enables you to interact with your database, like you would with SQL. In fact, Django's ORM is just a pythonical way to create SQL to query and manipulate your database and get results in a pythonic fashion.

    Django lets us interact with its database models, i.e. add, delete, modify and query objects, using a database-abstraction API called ORM(Object Relational Mapper)

DATA STRUCTURES:

    Data structures are code structures for storing and organizing data that make it easier to modify,
    navigate, and access information. Data structures determine how data is collected, 
    the functionality we can implement, and the relationships between data.

    CHECK AVAILABLE OPTIONS: print(dir.objectname)   #object=list , tuple dict etc

        String:
            Note: All string methods returns new values. They do not change the original string.

            Method	Description
            capitalize()	Converts the first character to upper case
            casefold()	Converts string into lower case
            center()	Returns a centered string
            count()	Returns the number of times a specified value occurs in a string
            encode()	Returns an encoded version of the string
            endswith()	Returns true if the string ends with the specified value
            expandtabs()	Sets the tab size of the string
            find()	Searches the string for a specified value and returns the position of where it was found
            format()	Formats specified values in a string
            format_map()	Formats specified values in a string
            index()	Searches the string for a specified value and returns the position of where it was found
            isalnum()	Returns True if all characters in the string are alphanumeric
            isalpha()	Returns True if all characters in the string are in the alphabet
            isascii()	Returns True if all characters in the string are ascii characters
            isdecimal()	Returns True if all characters in the string are decimals
            isdigit()	Returns True if all characters in the string are digits
            isidentifier()	Returns True if the string is an identifier
            islower()	Returns True if all characters in the string are lower case
            isnumeric()	Returns True if all characters in the string are numeric
            isprintable()	Returns True if all characters in the string are printable
            isspace()	Returns True if all characters in the string are whitespaces
            istitle()	Returns True if the string follows the rules of a title
            isupper()	Returns True if all characters in the string are upper case
            join()	Joins the elements of an iterable to the end of the string
            ljust()	Returns a left justified version of the string
            lower()	Converts a string into lower case
            lstrip()	Returns a left trim version of the string
            maketrans()	Returns a translation table to be used in translations
            partition()	Returns a tuple where the string is parted into three parts
            replace()	Returns a string where a specified value is replaced with a specified value
            rfind()	Searches the string for a specified value and returns the last position of where it was found
            rindex()	Searches the string for a specified value and returns the last position of where it was found
            rjust()	Returns a right justified version of the string
            rpartition()	Returns a tuple where the string is parted into three parts
            rsplit()	Splits the string at the specified separator, and returns a list
            rstrip()	Returns a right trim version of the string
            split()	Splits the string at the specified separator, and returns a list
            splitlines()	Splits the string at line breaks and returns a list
            startswith()	Returns true if the string starts with the specified value
            strip()	Returns a trimmed version of the string
            swapcase()	Swaps cases, lower case becomes upper case and vice versa
            title()	Converts the first character of each word to upper case
            translate()	Returns a translated string
            upper()	Converts a string into upper case
            zfill()	Fills the string with a specified number of 0 values at the beginning
            Note: All string methods returns new values. They do not change the original string.

        List:

            Array-like structures that let you save a set of mutable 
            objects of the   same type to a variable.

            OPERATIONS:

                APPEND:
                        lst_name.append(element)        #  element gets appeneded at the ends
                INSERT:
                        lst_name.insert(index,value)    #  value is inserted at the index position
                CLEAR:
                        lst_name.clear()                #  removes every element, returs empty list
                POP:
                        lst_name.pop(index)             # remove index element,returns popped val or last value bydeault
                DEL:
                        del lst_name[index]             #      same   ,returns None
                REMOVE:
                        lst_name.remove(element)        # remove element   
                COUNT:
                        lst_name.count(element)         #   returns the number of times the specified
                                                             element appears in the list.                      
                REVERSE:
                        lst_name.reverse()
                SORT:
                        lst_name.sort(key= ,reverse=)           updates list
                SORTED:
                        newlist=sorted(lst_name,key= ,reverse=)         returns new sorted list,        
                COPY:
                        newlist=lst_name.copy()                     #  returns a shallow copy of the list.
                EXTEND:
                        my_list.extend(iterable)             #  adds all the elements of an iterable 
                                                            (list, tuple, string etc.) to the end of the list.            

        Tuple:

            Tuples are immutable lists, meaning the elements cannot be changed. 
            It’s declared with parenthesis instead of square brackets.

            OPERATIONS:

                    COUNT:
                            my_tuple.count(element)   # returns no of elements in my_tuple
                    INDEX:
                            tuple.index(element, start, end)

                            Tuple index() parameters
                            The tuple index() method can take a maximum of three arguments:

                            element - the element to be searched
                            start (optional) - start searching from this index
                            end (optional) - search the element up to this index        
        Set: 

            Sets are unordered collections, meaning that elements are unindexed 
            and have no set sequence. They’re declared with curly braces.

            Method	Description
            add()	Adds an element to the set
            clear()	Removes all the elements from the set
            copy()	Returns a copy of the set
            difference()	Returns a set containing the difference between two or more sets
            difference_update()	Removes the items in this set that are also included in another, specified set
            discard()	Remove the specified item
            intersection()	Returns a set, that is the intersection of two or more sets
            intersection_update()	Removes the items in this set that are not present in other, specified set(s)
            isdisjoint()	Returns whether two sets have a intersection or not
            issubset()	Returns whether another set contains this set or not
            issuperset()	Returns whether this set contains another set or not
            pop()	Removes an element from the set
            remove()	Removes the specified element
            symmetric_difference()	Returns a set with the symmetric differences of two sets
            symmetric_difference_update()	inserts the symmetric differences from this set and another
            union()	Return a set containing the union of sets
            update()	Update the set with another set, or any other iterable

    Dictionary (dict):

        Similar to hashmap or hash tables in other languages, a dictionary 
        is a collection of key/value pairs. You initialize an empty 
        dictionary with empty curly braces and fill it with colon separated 
        keys and values. All keys are unique, immutable objects.

        Method	Description

        clear()	Removes all the elements from the dictionary
        copy()	Returns a copy of the dictionary
        fromkeys()	Returns a dictionary with the specified keys and value
        get()	Returns the value of the specified key
        items()	Returns a list containing a tuple for each key value pair
        keys()	Returns a list containing the dictionary's keys
        pop()	Removes the element with the specified key
        popitem()	Removes the last inserted key-value pair
        setdefault()	Returns the value of the specified key. If the key does not exist: insert the key, with the specified value
        update()	Updates the dictionary with the specified key-value pairs
        values()	Returns a list of all the values in the dictionary


    User-Defined Data Structures

        Arrays vs. Lists
            Arrays and lists are the same structure with one difference.
            Lists allow heterogeneous data element storage whereas Arrays 
            allow only homogenous elements to be stored within them.

        Stack:
            Stacks are linear Data Structures which are based on the principle of Last-In-First-Out (LIFO) where data which
            is entered last will be the first to get accessed. It is built using the array structure and has operations namely,
            pushing (adding) elements, popping (deleting) elements and accessing elements only from
            one point in the stack called as the TOP.

        Queue
            A queue is also a linear data structure which is based on the principle of First-In-First-Out (FIFO)
            where the data entered first will be accessed first. It is built using the array structure and has operations
            which can be performed from both ends of the Queue, that is, head-tail or front-back.

        Tree
            Trees are non-linear Data Structures which have root and nodes. The root is the node from where the
            data originates and the nodes are the other data points that are available to us. The node that precedes
            is the parent and the node after is called the child.

        Linked List
            Linked lists are linear Data Structures which are not stored consequently but are linked with
            each other using pointers. The node of a linked list is composed of data and a pointer called next.

ABSTRACT CLASSES:

    In Python, abstract base classes provide a blueprint for concrete classes.
    They don’t contain implementation. Instead, they provide an interface and make sure that derived concrete classes are properly implemented.

    Abstract base classes cannot be instantiated. Instead, they are inherited and extended by the concrete subclasses.

    Subclasses derived from a specific abstract base class must implement the methods and properties provided in that abstract base class. Otherwise, an error is raised during the object instantiation.

ERP 
    A tool fo managing information.
    information management is the organised collection, storage and use
    of information for the benefit of an enterprise

        CRM
            CRM is an acronym that stands for customer relationship management. Customer relationship 
            management is any tool, strategy, or process that helps businesses better organize 
            and access customer data. ... Managing your business's relationships with customers 
            became a complicated process.

        ORDER MANAGEMENT 
            or an inventry management
        
        ACCOUNTING SYSTEM

        SPREADSHEETS
            these dont talsk or shere data wit each other 
            island of information   
            

            ERP centrelizes all these
            streamline flow of information
            business proces   becomes connctded

            provide better service.
            effective team.
            Analize data
            make reports

VIRTUAL ENV:
            a virtual environment provides you a development environment independent of the host operating system.
            You can install and use necessary software in the /bin folder of the virtualenv, instead of using
            the software installed in the host machine.

SQL COMMANDS:
            SQL joins are used to combine records from two or more than two tables in a database system.
            A join refers to combining the fields from two or more than two tables by using a value that
            is common to each of the tables which helps in reducing the repeated columns and data stored
            in columns of the same table.

            a) Inner JOIN: Inner JOIN is also known as a simple JOIN. This SQL query returns results
            from both the tables having a common value in rows.

            SQL Query:

            SELECT * from employee, employee_info WHERE employee.EmpID = employee_info.EmpID ;
            Result:

            Inner Join Example

            b) Natural JOIN: This is a type of Inner JOIN that returns results from both the tables having
            the same data values in the columns of both the tables to be joined.

            SQL Query:

            SELECT * from employee NATURAL JOIN employee_info;
            Result:

            Natural JOIN

            c) Cross JOIN: Cross JOIN returns the result as all the records where each row from the first
            table is combined with each row of the second table.

            SQL Query:

            SELECT * from employee CROSS JOIN employee_info;
            Result:

            Let us do some modification in the above tables to understand Right JOIN, Left JOIN, and Full JOIN.

            employee table:

            employee table new

            employee_info table:

            employee_info table new

            a) Right JOIN: Right JOIN is also known as Right Outer JOIN. This returns all the rows
            as a result from the right table even if the JOIN condition does not match any records in the left table.

            SQL Query:

            SELECT * from employee RIGHT OUTER JOIN employee_info on (employee.EmpID = employee_info.EmpID);
            Result:

            Right Join Example

            b) Left JOIN: Left JOIN is also known as Left Outer JOIN. This returns all the rows as a result of the
            left table even if the JOIN condition does not match any records in the right table. This is exactly the opposite of Right JOIN.

            SQL Query:

            SELECT * from employee LEFT OUTER JOIN employee_info on (employee.EmpID = employee_info.EmpID);
            Result:

            Left JOIN

            c) Outer/Full JOIN: Full JOIN return results in combining the result of both the Left JOIN and Right JOIN.

            SQL Query:

            SELECT * from employee FULL OUTER JOIN employee_info on (employee.EmpID = employee_info.EmpID);
    
EXCEPTION HANDLING:


        Exception handling ensures that the flow of the program doesn't break when an exception occurs
        during the execution of a program.

        These exceptions can be handled using the try,expect and finally..

        try is used to test  the code block. if there is any error in that then the expect block
        get excuted and finally will get excuted reagardeless of the reslt of try or except block.

DJANGO WORKS
        Django is a Python-based free and open-source web framework 
        that follows the model–template–views architectural pattern. 

        Django is a high-level Python web framework that enables rapid development
        of secure and maintainable websites. 
         
        Django takes care of much of the hassle of web development,
        so you can focus on writing your app without needing to reinvent the wheel. It is free and open source, has a thriving and active community, great documentation, and many options for free and paid-for support.

        



MVT DJANGO:

    The MVT (Model View Template) is a software design pattern. It is a collection of three important components Model View and Template. The Model helps to handle database. It is a data access layer which handles the data.

    The Template is a presentation layer which handles User Interface part completely. The View is used to execute the business logic and interact with a model to carry data and renders a template.

    Although Django follows MVC pattern but maintains it?s own conventions. So, control is handled by the framework itself.

    There is no separate controller and complete application is based on Model View and Template. That?s why it is called MVT application.

        How does Django handle a request?
        Whenever a request comes into Django, it is handled by middlewares. When the Django server starts, the first thing it loads after settings.py is middlewares. The Request is processed by various middlewares one at a time. So, from the above list, when the request comes it will be passed through the security middleware.

            Here, a user requests for a resource to the Django, Django works as a controller and check to the available resource in URL.

            If URL maps, a view is called that interact with model and template, it renders a template.

            Django responds back to the user and sends a template as a response.


JAVASCRIPT:

    // x = 6; I will not be executed      comments

    var: 
        function scoped or globally scoped
        can be reassigned(can b overridden)
        can be accesed before assignment
    Let: 
        block scoped
        cannot be redeclared
        cannot be called before assignment
    const:
        does not aloww reassignment(BUT can change  properties)

        eg:
            const constVar={name:"bob"}
            const.name="sally"

    JAVASCRIPT STATEMENTS:
        <script>
            var x, y, z;  // Declare 3 variables
            x = 5;    // Assign the value 5 to x
            y = 6;    // Assign the value 6 to y
            z = x + y;  // Assign the sum of x and y to z

            document.getElementById("demo").innerHTML =
            "The value of z is " + z + ".";
        </script>


    ARRAY:
        check if element exist:
            const fruits = ["Banana", "Orange", "Apple", "Mango"];
            fruits.includes("Mango")   // Returns 
            
        for (item of arr){
            if (item%2==0){
                even.push(item)
                }
            else{
                odd.push(item)
                } 
            }       
            


    JAVASCRIPT OPERATORS:
            <script>
                let x=(5 + 6) * 100000;
                document.getElementById("demo").innerHTML = x
            </script> 
            <script>
                var x;
                x = 5;
                document.getElementById("demo").innerHTML = x * 10;
                </script>   

            

JQUERY VS JAVASCRIPT:
        Return the element with id="id01":
            myElement = $("#id01");              #id
            myElement = document.getElementById("id01");

            myElements = $("p");                  <tag>
            myElements = document.getElementsByTagName("p");

            myElements = $(".intro");               .class
            myElements = document.getElementsByClassName("intro");


        Return a list of all <p> elements with class="intro".
            myElements = $("p.intro");
            myElements = document.querySelectorAll("p.intro");

            <script>
                $(document).ready(function() {
                var myElements = $("p.intro");
                $("#demo").text("The first paragraph with class='intro' is: " + myElements[0].innerHTML);
                });
            </script>

        Set the inner text of an HTML element:
            myElement.text("Hello Sweden!");
            myElement.textContent = "Hello Sweden!";

            <script>
                $(document).ready(function() {
                var myElement = $("#01");
                myElement.text("Hello Sweden!");
                });
            </script>

        Get the inner text of an HTML element:
            myText = $("#02").text();
            myText = document.getElementById("02").textContent;

            <script>
                $(document).ready(function() {
                var myText = $("#02").text();
                $("#demo").text(myText); 
                });
            </script>

        Set the HTML content of an element:
            myElement.html("<p>Hello World</p>");
            myElement.innerHTML = "<p>Hello World</p>";

            <script>
                $(document).ready(function() {
                $("#02").html("<p>Hello World!</p>");
                });
            </script>

        Get the HTML content of an element:
            content = myElement.html();
            content = myElement.innerHTML;

            <script>
                $(document).ready(function() {
                var content = $("#02").html();
                $("#01").html(content);
                });
            </script>    



    JQUERY DOCUMENT.READY()
                <script>
                    $(document).ready(function() {
                    $("#02").hide();
                    });
                </script>
    JQUERY CSS:
        Hide an HTML Element:

            myElement.hide();
            myElement.style.display = "none";



        Show an HTML Element:
            myElement.show();
            myElement.style.display = "";

        Change the font size of an HTML element:
            $("#demo").css("font-size","35px");
            document.getElementById("demo").style.fontSize = "35px";

        Remove an HTML element:
            $("#id02").remove();
            document.getElementById("id02").remove();

                <script>
                    $(document).ready(function() {
                    $("#id02").remove();
                    });
                    </script>

        Return the parent of an HTML element:
            <script>
                $(document).ready(function() {
                $("#demo").text($("#02").parent().prop("nodeName")); 
                });
                </script>













    employee workin in project:

    an employye works in multiple projects
    a project has got many employeess


    requirement analysis
    feasibility study
    cost-benefit analysiss
    SRS: sftwr req specification
    UML Diagram:
    Data flow diagrams:

    UI design
    Data 
    architecture

    development
    TESTING
    unit testing  (Developer does this)
    Intergration testing
    UAT :user acceptance TESTING
    deployment
    TOOLTIP CSS:
            <script type="text/javascript">
                $(document).ready(function(){
                    $('[tool-tip-toggle="tooltip-demo"]').tooltip({
                        placement : 'bottom'
                    });
                });
        </script>

    TOOLTIP HTML :
    <div class="container">
 
    <div class="row">
 
    <h2>Font awesome with tooltips</h2>
 
        <div class="col-md-6">
 
 
 
            <a href="#"><span class="fa fa-spinner fa-spin fa-4x" tool-tip-toggle="tooltip-demo" data-original-title="Font awesome spin"></span></a>
 
            <a href="#"><span class="fa fa-camera-retro fa-4x" tool-tip-toggle="tooltip-demo" data-original-title="Camera icon"></span></a>
 
            <span class="fa fa-bar-chart fa-3x" tool-tip-toggle="tooltip-demo" data-original-title="A bar chart"></span>
 
            <a href="#"><span class="fa fa-barcode fa-5x" tool-tip-toggle="tooltip-demo" data-original-title="Bar code icon"></span></a>
 
            <a href="#"><span class="fa fa-calendar fa-3x" tool-tip-toggle="tooltip-demo" data-original-title="The Calendar"></span></a>
 
            <span class="fa fa-code fa-2x" tool-tip-toggle="tooltip-demo" data-original-title="Code"></span>
 
        </div>
 
 
 
    </div>
 
    </div>
 
 
 
    </div>

    AGILE Model:

MYSQL:
    Username: root
    Pasword : rinson@123

    COMMANDS:
        BASICS:
            SELECT VERSION();               //returns current version
            show databases;                 //returns all available databases
            CREATE DATABASE databaseName;
            USE databaseName;
            show tables;            or   
            SHOW FULL TABLES;       or
            SHOW TABLES FROM database_name;
            CREATE TABLE pet (name VARCHAR(20), owner VARCHAR(20),
                        species VARCHAR(20), sex CHAR(1), birth DATE, death DATE);
            DESCRIBE pet;
            INSERT INTO pet
                        VALUES ('Puffball','Diane','hamster','f','1999-03-30',NULL);   
        ALTER:

            ALTER TABLE Employee
                    ADD Name varchar(50);  
            ALTER TABLE Employee 
                    MODIFY Name varchar(30) not null;
            ALTER TABLE Employee 
                    DROP COLUMN Name;
            ALTER TABLE Employee
                    CHANGE COLUMN phone_number phone varchar(10) not null
            ALTER TABLE teachers 
                    RENAME EDUCATORS  
            alter table projects 
                    rename column budjet to budget;                                    
         
        WHERE:
            SELECT what_to_select
                        FROM which_table
                        WHERE conditions_to_satisfy;

            SELECT 
                lastname, 
                firstname, 
                jobtitle,
                officeCode
            FROM
                employees
            WHERE
                jobtitle = 'Sales Rep' AND 
                officeCode = 1
                order by firstname;        
            SELECT 
                lastName, 
                firstName, 
                jobTitle, 
                officeCode
            FROM
                employees
            WHERE
                jobtitle = 'Sales Rep' OR 
                officeCode = 1
            ORDER BY 
                officeCode , 
                firstname;

            SELECT 
                firstName, 
                lastName
            FROM
                employees
            WHERE
                lastName LIKE '%son'
            ORDER BY firstName;            

            SELECT 
                lastname, 
                firstname, 
                jobtitle
            FROM
                employees
            WHERE
                jobtitle <> 'Sales Rep';


             SELECT 
                firstName, 
                lastName, 
                officeCode
            FROM
                employees
            WHERE
                officeCode BETWEEN 1 AND 3
            ORDER BY officeCode;  

            SELECT 
                firstName, 
                lastName, 
                officeCode
            FROM
                employees
            WHERE
                officeCode IN (1 , 2, 3)
            ORDER BY 
                officeCode; 
            SELECT 
                officeCode, 
                city, 
                phone, 
                country
            FROM
                offices
            WHERE
                country IN ('USA' , 'France');    

            SELECT 
                lastName, 
                firstName, 
                reportsTo
            FROM
                employees
            WHERE
                reportsTo IS NULL;   
	    CHECK:
		job varchar(20) check (job in ('analyst','manager','clerk')),

	FORIEGN KEY:
		foreign key (emp_no) references employees (emp_no) 
		on delete cascade on update cascade,	       

	COMPOSITE KEY:
		emp_no int not null,  
		
		pro_no int not null,        
		primary key( emp_no, pro_no)
        
       create table works_on
				(
				emp_no int not null,
				pro_no int,   
				job varchar(20) check (job in ('analyst','manager','clerk')),
				date datetime,
				foreign key (emp_no) references employees (emp_no) on delete cascade on update cascade,
				foreign key (pro_no) references projects (pro_no) on delete cascade on update cascade,
				primary key( emp_no, pro_no)
				);   
        Operator	Description
                =	Equal to. You can use it with almost any data type.
         <> or !=	Not equal to
                <	Less than. You typically use it with numeric and date/time data types.
                >	Greater than.
                <=	Less than or equal to
                >=	Greater than or equal to






        LIMIT:
            Select * from Employee LIMIT 0,5    
                        from 0 to how many records
        DISTINCT:
            select DISTINCT emp_anme from employee 
                    (avoid douplicate records)
            select DISTINCT emp_anme from employee 
                    (avoid douplicate records)
        COUNT:            
            select count(ep_name) from employess


NODE JS:

    INPUT FROM USER:
            const readline = require("readline");

            const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
            });

            rl.question("What is your name? ", function (answer) {
            console.log(`Oh, so your name is ${answer}`);
            console.log("Closing the interface");
            rl.close();
            });

            $ node ask.js
            What is your name? Nathan
            Oh, so your name is Nathan
            Closing the interface
            $

    PROMPT SYNC:
                const prompt = require("prompt-sync")();     //synchroonous method

                const input = prompt("What is your name? ");

                console.log(`Oh, so your name is ${input}`);

    READLINE_SYNC:
                var readlineSync = require('readline-sync');
 
                // Wait for user's response.
                var userName = readlineSync.question('May I have your name? ');
                console.log('Hi ' + userName + '!');
                
                // Handle the secret text (e.g. password).
                var favFood = readlineSync.question('What is your favorite food? ', {
                hideEchoBack: true // The typed text on screen is hidden by `*` (default).
                });
                console.log('Oh, ' + userName + ' loves ' + favFood + '!');
                May I have your name? CookieMonster
                Hi CookieMonster!
                What is your favorite food? ****
                Oh, CookieMonster loves tofu!

    TASK:        
            middle wares   
            file handling library : multer         next fri

            moment library

    COMMANDS:        
        SET DEBUG=helloworld:* & npm start   # Run helloworld on Windows with Command Prompt
        SET DEBUG=helloworld:* | npm start   # Run helloworld on Windows with PowerShell   
        # Run helloworld on Linux/macOS
        DEBUG=helloworld:* npm start

        Embedded JavaScript templates (EJS)
        <%= tagline %>   // render single variable
        Use <%- include('RELATIVE/
            eg: <p><%= tagline %></p>

        PATH/TO/FILE') %> to embed an EJS partial in another file.

        The hyphen <%- instead of just <% to tell EJS to render raw HTML.
        The path to the partial is relative to the current file.

        app.set('view engine', 'ejs');  // set the view engine to ejs
        npm install ejs
        
        npm start or
        nodemon start
        express <appname>   or 
        npx express-generator <appname>
        node -v
        npm -v
        npm install eslint --save-dev
        npm list -g                 (tolist packges globally installed)
        npm list -g --depth 0
        npm init
            npm init is a convenient way of scaffolding your package. json; you may need to run it everytime you are starting a new project. npm install , however, installs your dependencies in node_modules folder. You may need to run this everytime you manually add a dependency to your package
    IF NAME==MAIN:
        var fnName = function() {
            // main code
        }

        if (require.main === module) {
            fnName();
        }
    SYNCRONOUS:
        var fs = require("fs");  
        var data = fs.readFileSync('input.txt');  
        console.log(data.toString());  
        console.log("Program Ended");
    ASYNCROUNOUS:
        var fs = require("fs");  
  
        fs.readFile('input.txt', function (err, data) {  
            if (err) return console.error(err);  
            console.log(data.toString());  
        });  
        console.log("Program Ended");  

    GLOBAL VS LOCAL INSTALL:
        The main difference between local and global packages is this:

        local packages are installed in the directory where you run npm install <package-name>, and they are put in the node_modules folder under this directory

        global packages are all put in a single place in your system (exactly where depends on your setup), regardless of where you run npm install -g <package-name>    

    Great examples of popular global packages which you might know are

        npm
        create-react-app
        vue-cli
        grunt-cli
        mocha
        react-native-cli
        gatsby-cli
        forever
        nodemon     



    <% if (messages.success) { %>
    <div class="alert alert-success" role="alert"><%- messages.success %></div>
    <% } %>

    <% if (messages.error) { %>
    <div class="alert alert-danger" role="alert"><%- messages.error %></div>
    <% } %> 


        
    localhost:4000/employees -list all emps
    localhost:4000/employees/add - add emp
    /employees/add - post - insert


    router.get('/', usersList);
    router.get('/registration', addUser);
    router.post('/registration', saveNewUser);
    router.get('/edit/:id', editUserInfo);
    router.post('/edit/:id',saveUserInfo);
    router.get('/getDelete/:id', confirmDeleteUser);
    router.get('/delete/:id', deleteUser);
    router.get('/login',logIn);
    router.post('/login',verifyUser);
    router.get('/logout',logOut);



    app.use(
        connection(mysql,{
            host: 'localhost',
            user: 'root',
            password : 'rinson@123',
            port : 3306, //port mysql
            database:'nodedb'
        },'pool') //or single
    );
    exports.list = function(req, res){
    req.getConnection(function(err,connection){
            var query = connection.query('SELECT * FROM customer',function(err,rows)
            {
                if(err)
                    console.log("Error Selecting : %s ",err );
                res.render('customers',{page_title:"Employee List",data:rows});
            });
            //console.log(query.sql);
        });
    };



    var mysql = require('mysql');
    var connection = mysql.createConnection({
        host:'localhost',
        user:'root',
        password:'rinson@123',
        database:'mycompany'
    });
    connection.connect(function(error){
        if(!!error) {
            console.log(error);
        } else {
            console.log('Database Connected..!');
        }
    });

    router.get('/', getEmployees)
    function getEmployees(req, res, next) {
        dbConn.query('SELECT * FROM employees',function(err,rows)     {
            if(err) {
                res.render('index',{data:''});
            } else {
                res.render('index',{data:rows});
            }
        });
    }



    if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
        res.status(err.status || 500);
        res.render('pages/error', {
        message: err.message,
        error: err
        });
    });
    }

    <%- include ../partials/header.ejs %>



    app.use()  //middleware


    <select  class="form-select" id="cliente" name="cliente" value="<%= datos%>" tabindex="1" required>
    <% for(var i=0; i < datos.length; i++) { %>
    <option 
        <%= datos[i].datos %>
    </option>
    <%}%>
    </select>

TYPESCRIPT:
    STtring METHODS:
        String methods
            Method	Description
            charAt()	Returns the character at the given index
            concat()	Returns a combination of the two or more specified strings
            indexOf()	Returns an index of first occurrence of the specified substring from a string (-1 if not found)
            replace()	Replaces the matched substring with a new substring
            split()	Splits the string into substrings and returns an array
            toUpperCase()	Converts all the characters of the string into upper case
            toLowerCase()	Converts all the characters of the string into lower case
            charCodeAt()	Returns a number that is the UTF-16 code unit value at the given index
            codePointAt()	Returns a nonnegative integer Number that is the code point value of the UTF-16 encoded code point starting at the specified index
            includes()	Checks whether a string includes another string
            endsWith()	Checks whether a string ends with another string
            LastIndexOf()	Returns the index of last occurrence of value in the string
            localeCompare()	Checks whether a string comes before, after or is the same as the given string
            match()	Matches a regular expression against the given string
            normalize()	Returns the Unicode Normalization Form of the given string.
            padEnd()	Pads the end of the current string with the given string
            padStart()	Pads the beginning of the current string with given string
            repeat()	Returns a string consisting of the elements of the object repeated in the given times.
            search()	Searches for a match between a regular expression and a string
            slice()	Returns a section of a string
            startsWith()	Checks whether a string starts with another string
            substr()	Returns a string beginning at the specified location and of the given characters
            substring()	Returns a string between the two given indexes
            toLocaleLowerCase()	Returns a lower case string while respecting current locale
            toLocaleUpperCase()	Returns an upper case string while respecting current locale
            trim()	Trims the white space from beginning and end of string
            trimLeft()	Trims the white space from left side of the string
            trimRight()	Trims the white space from right side of the string

    ARRAY METHODS:
            Array Methods
                The following table lists all Array methods which can be used for different purposes.

                Method	Description
                pop()	Removes the last element of the array and return that element
                push()	Adds new elements to the array and returns the new array length
                sort()	Sorts all the elements of the array
                concat()	Joins two arrays and returns the combined result
                indexOf()	Returns the index of the first match of a value in the array (-1 if not found)
                copyWithin()	Copies a sequence of elements within the array
                fill()	Fills the array with a static value from the provided start index to the end index
                shift()	Removes and returns the first element of the array
                splice()	Adds or removes elements from the array
                unshift()	Adds one or more elements to the beginning of the array
                includes()	Checks whether the array contains a certain element
                join()	Joins all elements of the array into a string
                lastIndexOf()	Returns the last index of an element in the array
                slice()	Extracts a section of the array and returns the new array
                toString()	Returns a string representation of the array
                toLocaleString()	Returns a localized string representing the array        

TYPEORM:

    With TypeORM your models look like this:

            import { Entity, PrimaryGeneratedColumn, Column } from "typeorm";

            @Entity()
            export class User {

                @PrimaryGeneratedColumn()
                id: number;

                @Column()
                firstName: string;

                @Column()
                lastName: string;

                @Column()
                age: number;

            }
            And your domain logic looks like this:

            const repository = connection.getRepository(User);

            const user = new User();
            user.firstName = "Timber";
            user.lastName = "Saw";
            user.age = 25;
            await repository.save(user);

            const allUsers = await repository.find();
            const firstUser = await repository.findOne(1); // find by id
            const timber = await repository.findOne({ firstName: "Timber", lastName: "Saw" });

            await repository.remove(timber);                



    typeorm init --name MyProject --database mysql
    typeorm init --express --name projectName --database mysql     //express
 